#include<iostream>
using namespace std;
struct node
{
    int data;
    struct node *next;
};
struct node *head=NULL, *ptr;

/*insert value at 1st position in the link list*/
void insert_begin(int value)
{
    struct node *temp;
    temp=(struct node *) malloc (sizeof(struct node));
    temp->data=value;
    temp->next=NULL;
    if (head==NULL)
    {
        head=temp;
    }
    else
    {
        temp->next=head;
        head=temp;
    }
}

/*insert value at last position in the link list*/
void insert_end(int value)
{
    struct node *temp;
    temp=(struct node *) malloc (sizeof(struct node));
    temp->data=value;

    if (head==NULL)
    {
        head==NULL;
    }
    else
    {
        ptr=head;
        while(ptr->next != NULL)
        {
            ptr=ptr->next;
        }
        ptr->next=temp;
        temp->next=NULL;
    }
}

/*insert value at specific position in the link list*/
void insert_after_specified_ele(int value, int ele)
{
    struct node *temp;
    temp=(struct node *) malloc (sizeof(struct node));
    temp->data=value;
    if (head==NULL)
    {
        head=temp;
    }
    else
    {
        ptr=head;
        while(ptr->data != ele)
        {
            ptr=ptr->next;
        }
        temp->next=ptr->next;
        ptr->next=temp;
    }
}

/*delete value at 1st position in the link list*/
void delete_begining(int value)
{
    if (head==NULL)
    {
        cout<<"List empty, deletion not possible";
    }
    else
    {
        ptr=head;
        head=head->next;
        ptr->next=NULL;
        free(ptr);
    }
}

/*delete value at last position in the link list*/
void delete_end(int value)
{
if (head==NULL)
    {
        cout<<"List empty, deletion not possible";
    }
    else
    {
        struct node *p;
        ptr=head;
        while(ptr->next != NULL)
        {
            p=ptr;
            ptr=ptr->next;
        }
        p->next=NULL;
        free(ptr);
    }
}

/*delete value at mid position in the link list*/
void delete_middle(int ele)
{
    if (head==NULL)
    {
        cout<<"List empty, deletion not possible";
    }
    else
    {
        struct node *p;
        ptr=head;
        while(ptr->data != ele)
        {
            p=ptr;
            ptr=ptr->next;
        }
        p->next=ptr->next;
        free(ptr);
    }
}
void search(int val)
{
   if (head==NULL)
    {
        cout<<"List empty";
    }
    else
    {
    struct node *temp=head;
    int count=0;
    while(temp != NULL)
      {
        count++;
        if (temp->data==val)
        {
            cout<<"found at position: ";
            cout<<count;
        }
        else
        {
            cout<< " No. not found in the list ";
            cout<<"\n";
        }
        temp=temp->next;
      }

    }

}

void mid(int value)
{
    if (head==NULL)
    {
        cout<<"List empty";
    }
    else
    {
        struct node *temp=head;
        ptr=head;
        while (temp != NULL && temp->next != NULL)
        {
            ptr=ptr->next;
            temp=temp->next->next;
        }
        cout<<ptr->data;
    }

}

void display()
{
    if(head==NULL)
    {
        cout<<"List empty";
    }
    else
    {
        ptr=head;
        while(ptr != NULL)
        {
            cout<<ptr->data;
            cout<<"\t";
            ptr=ptr->next;
        }
        cout<<"\t";
    }
}

int main()
{
    int value,ele,choice,val;
    cout<<"\n \t\t Menu Driven Program";
    cout<<"\n 1. insert_begin \n 2. insert_end \n 3. insert_after_specified_ele \n 4. delete_begining \n 5. delete_end \n 6. delete_middle \n 7. search \n 8. mid \n 9. exit ";


    while(1)
    {
        cout<<"\n Enter your choice:";
        cin>>choice;
        switch(choice)
        {
            case 1:
                {
                    cout<<"Enter the value";
                    cin>>value;
                    insert_begin(value);
                    display();
                    break;
                }
            case 2:
                {
                    cout<<"Enter the value";
                    cin>>value;
                    insert_end(value);
                    display();
                    break;
                }
            case 3:
                {
                    cout<<"Enter the value";
                    cin>>value;
                    cout<<"Enter the position";
                    cin>>ele;
                    insert_after_specified_ele (value,ele);
                    display();
                    break;
                }
            case 4:
                {
                    delete_begining(value);
                    display();
                    break;
                }
            case 5:
                {
                    delete_end(value);
                    display();
                    break;
                }
            case 6:
                {
                    cout<<"Enter the value to delete";
                    cin>>ele;
                    delete_middle(ele);
                    display();
                    break;
                }
            case 7:
                {
                    cout<<"Enter the value to search:";
                    cin>>val;
                    search(val);
                    cout<<"\n";
                    //display();
                    break;
                }
            case 8:
                {
                    mid(value);
                    //display();
                    break;
                }
            case 9:
                exit(0);
        }
    }

}
